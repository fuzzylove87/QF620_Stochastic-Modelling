import pandas as pd
import numpy as np
import scipy.stats as ss
from scipy.stats import norm
from scipy.optimize import brentq
import matplotlib.pylab as plt
import datetime as dt
from scipy import interpolate
from math import exp, log

# =============================================================================
# 
# =============================================================================

rate_df = pd.read_csv('discount.csv')
interp = interpolate.interp1d(rate_df.iloc[:,0],rate_df.iloc[:,1])

today = dt.date(2013, 8, 30)
expiry = dt.date(2015, 1, 17)
D = (expiry-today).days
T = D/365.0
S = 846.9
r = interp(D)/100
F = S*exp(r*T)


def fetch():
    googcall = pd.read_csv('goog_call.csv')
    googcall['call'] = (googcall['best_bid']+googcall['best_offer'])/2
    googput = pd.read_csv('goog_put.csv')
    googput['put'] = (googput['best_bid']+googput['best_offer'])/2
    global goog 
    goog = pd.concat([googcall['strike'],googcall['call'],googput['put']], axis=1)
    return goog

fetch()

goog['callonly']= goog.apply(lambda row: row['call'] if row['strike']>F else np.nan,axis=1)
goog['putonly']= goog.apply(lambda row: row['put'] if row['strike']<F else np.nan,axis=1)
strikes = goog['strike']
strikes_c = [i for i in goog['strike'] if i>F]
strikes_p = [i for i in goog['strike'] if i<F]
call_price = [i for i in goog['callonly'] if i>0]
put_price = [i for i in goog['putonly'] if i>0]
realprices = put_price + call_price 

# =============================================================================
# Extracted ATM SIGMA using Black Scholes
# =============================================================================


sigma = (0.25425618293224583 + 0.26229211463233354)/2


# =============================================================================
# 
# =============================================================================




def BS_Call(S,K,T,r,sigma):
    d1 = (np.log(S/K)+(r+(sigma**2)/2)*T)/(sigma*np.sqrt(T))
    d2 = (np.log(S/K)+(r-(sigma**2)/2)*T)/(sigma*np.sqrt(T))
    return S*ss.norm.cdf(d1,0,1)-K*np.exp(-r*T)*ss.norm.cdf(d2,0,1)

def BS_Put(S,K,T,r,sigma):
    d1 = (np.log(S/K)+(r+(sigma**2)/2)*T)/(sigma*np.sqrt(T))
    d2 = (np.log(S/K)+(r-(sigma**2)/2)*T)/(sigma*np.sqrt(T))
    return K*np.exp(-r*T)*ss.norm.cdf(-d2,0,1)-S*ss.norm.cdf(-d1,0,1)

def Bach_Call(S,K,T,r,sigma):
    x_Star = (K-S)/(S*sigma*np.sqrt(T))
    return np.exp(-r*T)*((S-K)*ss.norm.cdf(-x_Star,0,1)+
                         S*sigma*np.sqrt(T)*ss.norm.pdf(-x_Star,0,1))

def Bach_Put(S,K,T,r,sigma):
    x_Star = (K-S)/(S*sigma*np.sqrt(T))
    return np.exp(-r*T)*((K-S)*ss.norm.cdf(x_Star,0,1)+
                         S*sigma*np.sqrt(T)*ss.norm.pdf(-x_Star,0,1))
    
def B76_N_Call(S,K,T,r,sigma):
    F = S*np.exp(r*T)
    x_star = (K-F)/(F*sigma*np.sqrt(T))
    return np.exp(-r*T)*((F-K)*ss.norm.cdf(-x_star)+F*sigma*np.sqrt(T)*ss.norm.pdf(-x_star))
    
def B76_N_Put(S,K,T,r,sigma):
    F = S*np.exp(r*T)
    x_star = (K-F)/(F*sigma*np.sqrt(T))
    return np.exp(-r*T)*((K-F)*ss.norm.cdf(x_star)+F*sigma*np.sqrt(T)*ss.norm.pdf(x_star))

def B76_LogN_Call(S,K,T,r,sigma):
    F=S*np.exp(r*T)
    d1 = (np.log(F/K)+(sigma**2)/2*T)/(sigma*np.sqrt(T))
    d2 = (np.log(F/K)-(sigma**2)/2*T)/(sigma*np.sqrt(T))
    return np.exp(-r*T)*(F*ss.norm.cdf(d1,0,1)-K*ss.norm.cdf(d2,0,1))

def B76_LogN_Put(S,K,T,r,sigma):
    F=S*np.exp(r*T)
    d1 = (np.log(F/K)+(sigma**2)/2*T)/(sigma*np.sqrt(T))
    d2 = (np.log(F/K)-(sigma**2)/2*T)/(sigma*np.sqrt(T))
    return np.exp(-r*T)*(K*ss.norm.cdf(-d2,0,1)-F*ss.norm.cdf(-d1,0,1))





def DD_Call(S,K,T,r,sigma,Beta):
    if Beta==0:
        F=(S*np.exp(r*T))
        x_Star = (K-F)/(F*sigma*np.sqrt(T))
        return np.exp(-r*T)*((F-K)*ss.norm.cdf(-x_Star,0,1)+
                             F*sigma*np.sqrt(T)*ss.norm.pdf(-x_Star,0,1))
    else:
        F=(S*np.exp(r*T))/Beta
        K=K+((1-Beta))*F
        sigma=Beta*sigma
        d1 = (np.log(F/K)+(sigma**2)/2*T)/(sigma*np.sqrt(T))
        d2 = (np.log(F/K)-(sigma**2)/2*T)/(sigma*np.sqrt(T))
        return np.exp(-r*T)*(F*ss.norm.cdf(d1,0,1)-K*ss.norm.cdf(d2,0,1))

def DD_Put(S,K,T,r,sigma,Beta):
    if Beta==0:
        F=(S*np.exp(r*T))
        x_Star = (K-F)/(F*sigma*np.sqrt(T))
        return np.exp(-r*T)*((K-F)*ss.norm.cdf(x_Star,0,1)+
                             F*sigma*np.sqrt(T)*ss.norm.pdf(-x_Star,0,1))
    else:
        F=(S*np.exp(r*T))/Beta
        K=K+((1-Beta))*F
        sigma=Beta*sigma
        d1 = (np.log(F/K)+(sigma**2)/2*T)/(sigma*np.sqrt(T))
        d2 = (np.log(F/K)-(sigma**2)/2*T)/(sigma*np.sqrt(T))
        return np.exp(-r*T)*(K*ss.norm.cdf(-d2,0,1)-F*ss.norm.cdf(-d1,0,1))
    

# =============================================================================
# GENERATE THEORETICAL OPTION PRICES
# =============================================================================


Beta = 0.8

#def Theo_Pricing():
#    global Theo_Price
#    Theo_Price=[]
#    for k in strikes:
#        Theo_Price.append([k, DD_Call(S,k,T,r,sigma,Beta),DD_Put(S,k,T,r,sigma,Beta)])
#    Theo_Price = pd.DataFrame(Theo_Price, columns=['strike','call','put'])
#    return Theo_Price

# Bach_Put / B76_N_Put / B76_LogN_Put / BS_Put
# Bach_Call / B76_N_Call / B76_LogN_Call / BS_Call



def Theo_Pricing():
    global Theo_Price
    Theo_Price=[]
    for k in strikes:
        Theo_Price.append([k,BS_Put(S,k,T,r,sigma),BS_Call(S,k,T,r,sigma)])
    Theo_Price = pd.DataFrame(Theo_Price, columns=['strike','put','call'])
    return Theo_Price



Theo_Pricing()

Theo_Price['callonly']= Theo_Price.apply(lambda row: row['call'] if row['strike']>F else np.nan,axis=1)
Theo_Price['putonly']= Theo_Price.apply(lambda row: row['put'] if row['strike']<F else np.nan,axis=1)

call_theo = [i for i in Theo_Price['callonly'] if i>0]
put_theo = [i for i in Theo_Price['putonly'] if i>0]
theoprices = put_theo + call_theo 

Theo_Price['theoprices'] = theoprices
Theo_Price['Realprice'] = realprices

Theo_Price.set_index('strike', inplace=True)


# =============================================================================
# DISPLACED DIFFUSION IMPLIED VOLATILITY 
# =============================================================================


def impliedCallVolatility_DD (S, K, T, r, price, Beta):
    impliedvol = brentq(lambda x: price -
                        DD_Call(S, K, T, r, x, Beta),
                        1e-6, 1)
    return impliedvol

def impliedPutVolatility_DD (S, K, T, r, price, Beta):
    impliedvol = brentq(lambda x: price -
                        DD_Put(S, K, T, r, x, Beta),
                        1e-6, 1)
    return impliedvol



def getDDivTheo(Beta):
    
    for K,i in zip(strikes_p,range(len(strikes_p))):
        price = put_theo[i]
#        price = BS_Put(S,K,T,r,sigma)
        impliedvol = impliedPutVolatility_DD(S, K, T, r, price, Beta)
        DDsummary.append([K, impliedvol])
        
    for K,i in zip(strikes_c,range(len(strikes_c))):
        price = call_theo[i]
#        price = BS_Call(S,K,T,r,sigma)
        impliedvol = impliedCallVolatility_DD(S, K, T, r, price, Beta)
        DDsummary.append([K, impliedvol])
        
    
DDsummary = []
getDDivTheo(Beta)
DDsummary = pd.DataFrame(DDsummary, columns=['Strike','IV-DD-Theo']) 
#DDsummary.set_index('Strike', inplace=True)




def getDDivReal(Beta):
    
    for K,i in zip(strikes_p,range(len(strikes_p))):
        price = put_price[i]
        impliedvol = impliedPutVolatility_DD(S, K, T, r, price, Beta)
        DDRsummary.append([K, impliedvol])
        
    for K,i in zip(strikes_c,range(len(strikes_c))):
        price = call_price[i]
        impliedvol = impliedCallVolatility_DD(S, K, T, r, price, Beta)
        DDRsummary.append([K, impliedvol])
        
    
DDRsummary = []
getDDivReal(Beta)
DDRsummary = pd.DataFrame(DDRsummary, columns=['Strike','IV-DD-Real']) 




# =============================================================================
# OTHER MODELS IMPLIED VOLATILITY
# =============================================================================



def impliedCallVolatility(S, K, T, r, price, model):
    impliedvol = brentq(lambda x: price -
                        model(S, K, T, r, x),
                        1e-6, 1)
    return impliedvol

def impliedPutVolatility(S, K, T, r, price, model):
    impliedvol = brentq(lambda x: price -
                        model(S, K, T, r, x),
                        1e-6, 1)
    return impliedvol





def getiv(model_C, model_P, no):
    summary = []

    for K,i in zip(strikes_p,range(len(strikes_p))):
#        price = BS_Put(S,K,T,r,sigma)
        price = put_theo[i]
#        price = put_price[i]
        impliedvol = impliedPutVolatility(S, K, T, r, price, model_P)
        summary.append([K, price, impliedvol])
        
    for K,i in zip(strikes_c,range(len(strikes_c))):
#        price = BS_Call(S,K,T,r,sigma)
        price = call_theo[i]
#        price = call_price[i]
        impliedvol = impliedCallVolatility(S, K, T, r, price, model_C)
        summary.append([K, price, impliedvol])
        
    summary = pd.DataFrame(summary, columns = ['Strike', 'Price', 'IV-'+str(no)])
    globals()['summary'+str(no)] = summary   
    return globals()['summary'+str(no)]


getiv(B76_N_Call,B76_N_Put,1)
getiv(BS_Call,BS_Put,2)
getiv(B76_LogN_Call,B76_LogN_Put,3)
getiv(Bach_Call, Bach_Put, 4)








# =============================================================================
# 
# =============================================================================



plt.rcParams["figure.figsize"]=[14,7] 



df = pd.concat(
        [summary1[['Strike','IV-1']], summary2['IV-2'], summary3['IV-3'],
         summary4['IV-4'],DDsummary['IV-DD-Theo'],DDRsummary['IV-DD-Real']
         ], 
        axis=1)

df.columns=['Strike',"Black Normal", "Black Scholes","Black Lognormal","Bachelier",'IV-DD-Theo','IV-DD-Real']
df.set_index('Strike', inplace=True)

plt.plot(df.index, df['Black Normal'], 'ms', linewidth=1.0, markersize=3)
plt.plot(df['Black Scholes'], 'bs', linewidth=1.0, markersize=3)
plt.plot(df['Black Lognormal'], 'gs', linewidth=1.0, markersize=4)
plt.plot(df['Bachelier'], 'rs', linewidth=1.0,markersize=4)
plt.plot(df['IV-DD-Theo'], 'b-', linewidth=3.0,markersize=2)
plt.plot(df['IV-DD-Real'], 'y-', linewidth=4.0,markersize=2)

plt.legend()
plt.grid(linestyle='--')
print('Beta = ',Beta)


